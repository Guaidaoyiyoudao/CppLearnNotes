!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/3fdf28bc/
0	.vs/VSWorkspaceState.json	/^    "",$/;"	s	array:ExpandedNodes
0	CppProperties.json	/^        "${env.INCLUDE}",$/;"	s	array:configurations.0.includePath
0	CppProperties.json	/^        "WIN32",$/;"	s	array:configurations.0.defines
0	CppProperties.json	/^        "msvc_x86"$/;"	s	array:configurations.0.inheritEnvironments
0	CppProperties.json	/^    {$/;"	o	array:configurations
1	.vs/VSWorkspaceState.json	/^    "\\\\algorithm",$/;"	s	array:ExpandedNodes
1	CppProperties.json	/^        "${workspaceRoot}\\\\**"$/;"	s	array:configurations.0.includePath
1	CppProperties.json	/^        "_DEBUG",$/;"	s	array:configurations.0.defines
2	.vs/VSWorkspaceState.json	/^    "\\\\algorithm\\\\sort",$/;"	s	array:ExpandedNodes
2	CppProperties.json	/^        "UNICODE",$/;"	s	array:configurations.0.defines
3	.vs/VSWorkspaceState.json	/^    "\\\\classDemo"$/;"	s	array:ExpandedNodes
3	CppProperties.json	/^        "_UNICODE"$/;"	s	array:configurations.0.defines
BST	DataStructure/tree/BST.cpp	/^class BST{$/;"	c	file:
Base	classDemo/virutalDescons.cpp	/^    Base()$/;"	f	class:Base	file:
Base	classDemo/virutalDescons.cpp	/^class Base{$/;"	c	file:
Base	virtual.cpp	/^class Base$/;"	c	file:
C++基础	C++学习目标.md	/^## C++基础$/;"	s
C++学习目标	C++学习目标.md	/^# C++学习目标$/;"	c
Complex	DataStructure/complex.cpp	/^	Complex():re{0},im{0}{}$/;"	f	class:Complex	file:
Complex	DataStructure/complex.cpp	/^	Complex(double r):re{r},im{0}{}		$/;"	f	class:Complex	file:
Complex	DataStructure/complex.cpp	/^	Complex(double r,double i):re{r},im{i}{}$/;"	f	class:Complex	file:
Complex	DataStructure/complex.cpp	/^class Complex$/;"	c	file:
Container	DataStructure/container.hpp	/^class Container$/;"	c
CppLearnNotes	README.md	/^# CppLearnNotes$/;"	c
CurrentProjectSetting	.vs/ProjectSettings.json	/^  "CurrentProjectSetting": "x86-Debug"$/;"	s
Derived	classDemo/virutalDescons.cpp	/^    Derived()$/;"	f	class:Derived	file:
Derived	classDemo/virutalDescons.cpp	/^class Derived: public Base{$/;"	c	file:
ExpandedNodes	.vs/VSWorkspaceState.json	/^  "ExpandedNodes": [$/;"	a
F	concurrency/demo.cpp	/^    F(vector<int>& n):nums(n){}$/;"	f	class:F	file:
F	concurrency/demo.cpp	/^class F$/;"	c	file:
Functor	algorithm/sort_functor.cpp	/^    Functor(T _y):y(_y){};$/;"	f	class:Functor	file:
Functor	algorithm/sort_functor.cpp	/^class Functor{$/;"	c	file:
GradeBook	chapter3/GradeBook.cpp	/^GradeBook::GradeBook(std::string cn,std::string tn):courseName(cn),teacherName(tn)$/;"	f	class:GradeBook
GradeBook	chapter3/GradeBook.hpp	/^class GradeBook{$/;"	c
HeartRates	chapter3/HeartRates.cpp	/^HeartRates::HeartRates(int y,int m,int d,std::string n)$/;"	f	class:HeartRates
HeartRates	chapter3/HeartRates.hpp	/^class HeartRates$/;"	c
Node	DataStructure/tree/BST.cpp	/^    Node(T v):value(v){}$/;"	f	struct:Node	file:
Node	DataStructure/tree/BST.cpp	/^struct Node{$/;"	s	file:
PreviewInSolutionExplorer	.vs/VSWorkspaceState.json	/^  "PreviewInSolutionExplorer": false$/;"	b
Qt项目开发	C++学习目标.md	/^## Qt项目开发$/;"	s
SelectedNode	.vs/VSWorkspaceState.json	/^  "SelectedNode": "\\\\C++学习目标.md",$/;"	s
Solution	leetcode/3Sum Closet.cpp	/^class Solution {$/;"	c	file:
Solution	leetcode/3Sum.cpp	/^class Solution {$/;"	c	file:
Solution	leetcode/Add_Two_Numbers.cpp	/^class Solution {$/;"	c	file:
Solution	leetcode/Best_Time_to_Buy_and_Sell_Stock_II.cpp	/^class Solution {$/;"	c	file:
Solution	leetcode/Container With Most Water.cpp	/^class Solution {$/;"	c	file:
Solution	leetcode/Count and Say.cpp	/^class Solution {$/;"	c	file:
Solution	leetcode/House Robber.cpp	/^class Solution {$/;"	c	file:
Solution	leetcode/Longest Common Prefix.cpp	/^class Solution {$/;"	c	file:
Solution	leetcode/Longest Substring Without Repeating Characters.cpp	/^class Solution {$/;"	c	file:
Solution	leetcode/Longest Substring.cpp	/^class Solution {$/;"	c	file:
Solution	leetcode/Majority Element.cpp	/^class Solution {$/;"	c	file:
Solution	leetcode/Merge Two Sorted Lists.cpp	/^class Solution {$/;"	c	file:
Solution	leetcode/Sort Colors.cpp	/^class Solution {$/;"	c	file:
Solution	leetcode/Top K Frequent Elements.cpp	/^class Solution {$/;"	c	file:
Solution	leetcode/Valid Parentheses.cpp	/^class Solution {$/;"	c	file:
Solution	leetcode/max_subarray.cpp	/^class Solution {$/;"	c	file:
Solution	leetcode/remove_dup_array_ele.cpp	/^class Solution {$/;"	c	file:
Solution	leetcode/search_Insert_Position.cpp	/^class Solution {$/;"	c	file:
Solution	leetcode/two_sum.cpp	/^class Solution {$/;"	c	file:
Solution	leetcode/valid_sudoku.cpp	/^class Solution {$/;"	c	file:
SubClass	virtual.cpp	/^class SubClass: public Base$/;"	c	file:
TextQuery	memory/TextQuery.cpp	/^TextQuery::TextQuery(ifstream &is):file(new vector<string>)$/;"	f	class:TextQuery
TextQuery	memory/TextQuery.hpp	/^class TextQuery$/;"	c
VECTOR_HPP	DataStructure/vector.hpp	/^#define VECTOR_HPP$/;"	d
Vector	DataStructure/vector.hpp	/^	Vector(Vector& v)$/;"	f	class:Vector
Vector	DataStructure/vector.hpp	/^	Vector(Vector&& r)$/;"	f	class:Vector
Vector	DataStructure/vector.hpp	/^	Vector(std::initializer_list<value_type> lst)$/;"	f	class:Vector
Vector	DataStructure/vector.hpp	/^	explicit Vector(int sz):elem{new value_type[sz]},_size{sz},used{0}{}$/;"	f	class:Vector
Vector	DataStructure/vector.hpp	/^class Vector$/;"	c
__anon0d56e5770102	lambda.cpp	/^    auto f2 = [&](){$/;"	f	function:main	file:
__anone6c77aaf0102	leetcode/Top K Frequent Elements.cpp	/^        auto cmp = [&count](int left,int right){$/;"	f	function:Solution::topKFrequent	file:
_size	DataStructure/vector.hpp	/^	int _size = 0;$/;"	m	class:Vector	typeref:typename:int
add	DataStructure/tree/BST.cpp	/^    void add(T value){$/;"	f	class:BST	typeref:typename:void	file:
addTwoNumbers	leetcode/Add_Two_Numbers.cpp	/^    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {$/;"	f	class:Solution	typeref:typename:ListNode *	file:
balance	DataStructure/tree/BST.cpp	/^    void balance(){$/;"	f	class:BST	typeref:typename:void	file:
begin	DataStructure/vector.hpp	/^T* begin(Vector<T>& x)$/;"	f	typeref:typename:T *
bubleSort	algorithm/sort/bubleSort.cpp	/^void bubleSort(vector<int>& nums,int beg,int end)$/;"	f	typeref:typename:void
capacity	DataStructure/vector.hpp	/^	int capacity() const$/;"	f	class:Vector	typeref:typename:int
configurations	CppProperties.json	/^  "configurations": [$/;"	a
countAndSay	leetcode/Count and Say.cpp	/^    string countAndSay(int n) {$/;"	f	class:Solution	typeref:typename:string	file:
courseName	chapter3/GradeBook.hpp	/^    string courseName;$/;"	m	class:GradeBook	typeref:typename:string
day	chapter3/HeartRates.hpp	/^    int year,month,day;$/;"	m	class:HeartRates	typeref:typename:int
defines	CppProperties.json	/^      "defines": [$/;"	a	object:configurations.0
displayMessage	chapter3/GradeBook.cpp	/^void GradeBook::displayMessage() const$/;"	f	class:GradeBook	typeref:typename:void
elem	DataStructure/vector.hpp	/^	value_type* elem = nullptr;$/;"	m	class:Vector	typeref:typename:value_type *
end	DataStructure/vector.hpp	/^T* end(Vector<T>& x)$/;"	f	typeref:typename:T *
f1	concurrency/demo.cpp	/^void f1(vector<int>& nums)$/;"	f	typeref:typename:void
file	memory/TextQuery.hpp	/^    std::shared_ptr<std::vector<std::string>> file;$/;"	m	class:TextQuery	typeref:typename:std::shared_ptr<std::vector<std::string>>
findKey	leetcode/Longest Substring.cpp	/^        findKey(char k):key(k){}$/;"	f	class:Solution::findKey	file:
findKey	leetcode/Longest Substring.cpp	/^    class findKey{$/;"	c	class:Solution	file:
findMinStep	leetcode/test.cpp	/^int findMinStep(string board, string hand) {$/;"	f	typeref:typename:int
findNumber	STL/findvalue.cpp	/^bool findNumber(vector<int> a,int value)$/;"	f	typeref:typename:bool
findNumberIterator	STL/findvalue.cpp	/^vector<int>::iterator findNumberIterator(vector<int> a,int value)$/;"	f	typeref:typename:vector<int>::iterator
front	DataStructure/vector.hpp	/^	value_type front()const$/;"	f	class:Vector	typeref:typename:value_type
getCourseName	chapter3/GradeBook.cpp	/^std::string GradeBook::getCourseName() const$/;"	f	class:GradeBook	typeref:typename:std::string
getTeacherName	chapter3/GradeBook.cpp	/^std::string GradeBook::getTeacherName() const$/;"	f	class:GradeBook	typeref:typename:std::string
global	stream.cpp	/^const int global = 2;$/;"	v	typeref:typename:const int
grandparent	DataStructure/tree/BST.cpp	/^    shared_ptr<Node<T>> grandparent(shared_ptr<Node<T>> p){$/;"	f	class:BST	typeref:typename:shared_ptr<Node<T>>	file:
im	DataStructure/complex.cpp	/^	double re,im;$/;"	m	class:Complex	typeref:typename:double	file:
imag	DataStructure/complex.cpp	/^	double imag()const$/;"	f	class:Complex	typeref:typename:double	file:
includePath	CppProperties.json	/^      "includePath": [$/;"	a	object:configurations.0
inheritEnvironments	CppProperties.json	/^      "inheritEnvironments": [$/;"	a	object:configurations.0
insertSort	algorithm/sort/insertSort.cpp	/^void insertSort(vector<int>& nums,int beg,int end){$/;"	f	typeref:typename:void
intelliSenseMode	CppProperties.json	/^      "intelliSenseMode": "windows-msvc-x86"$/;"	s	object:configurations.0
isPalindrome	leetcode/Palindrome Number.cpp	/^bool isPalindrome(int x) {$/;"	f	typeref:typename:bool
isValid	leetcode/Valid Parentheses.cpp	/^    bool isValid(string s) {$/;"	f	class:Solution	typeref:typename:bool	file:
isValidSudoku	leetcode/valid_sudoku.cpp	/^   bool isValidSudoku(vector<vector<char>>& board) {$/;"	f	class:Solution	typeref:typename:bool	file:
key	leetcode/Longest Substring.cpp	/^        char key;$/;"	m	class:Solution::findKey	typeref:typename:char	file:
left	DataStructure/tree/BST.cpp	/^    shared_ptr<Node<T>> left;$/;"	m	struct:Node	typeref:typename:shared_ptr<Node<T>>	file:
lengthOfLongestSubstring	leetcode/Longest Substring Without Repeating Characters.cpp	/^    int lengthOfLongestSubstring(string s) {$/;"	f	class:Solution	typeref:typename:int	file:
lengthOfLongestSubstring	leetcode/Longest Substring.cpp	/^    int lengthOfLongestSubstring(string s) {$/;"	f	class:Solution	typeref:typename:int	file:
line_no	memory/TextQuery.hpp	/^    using line_no = std::vector<std::string>::size_type;$/;"	t	class:TextQuery	typeref:typename:std::vector<std::string>::size_type
longestCommonPrefix	leetcode/Longest Common Prefix.cpp	/^    string longestCommonPrefix(vector<string>& strs) {$/;"	f	class:Solution	typeref:typename:string	file:
main	DataStructure/main.cpp	/^int main()$/;"	f	typeref:typename:int
main	DataStructure/tree/BST.cpp	/^int main(){$/;"	f	typeref:typename:int
main	STL/findvalue.cpp	/^int main()$/;"	f	typeref:typename:int
main	algorithm/accumulate.cpp	/^int main(void)$/;"	f	typeref:typename:int
main	algorithm/nth_ele.cpp	/^int main () {$/;"	f	typeref:typename:int
main	algorithm/sort/bubleSort.cpp	/^int main()$/;"	f	typeref:typename:int
main	algorithm/sort/insertSort.cpp	/^int main()$/;"	f	typeref:typename:int
main	algorithm/sort/quickSort.cpp	/^int main()$/;"	f	typeref:typename:int
main	algorithm/sort/quickSortPtr.cpp	/^int main()$/;"	f	typeref:typename:int
main	algorithm/sort/selectSort.cpp	/^int main()$/;"	f	typeref:typename:int
main	algorithm/sort_functor.cpp	/^int main()$/;"	f	typeref:typename:int
main	chapter2/2_3.cpp	/^int main(void){$/;"	f	typeref:typename:int
main	chapter3/main.cpp	/^int main()$/;"	f	typeref:typename:int
main	chapter6/rand.cpp	/^int main()$/;"	f	typeref:typename:int
main	classDemo/virutalDescons.cpp	/^int main()$/;"	f	typeref:typename:int
main	concurrency/demo.cpp	/^int main()$/;"	f	typeref:typename:int
main	lambda.cpp	/^int main()$/;"	f	typeref:typename:int
main	leetcode/Palindrome Number.cpp	/^int main(void)$/;"	f	typeref:typename:int
main	leetcode/test.cpp	/^int main()$/;"	f	typeref:typename:int
main	memory/smart_pointer.cpp	/^int main()$/;"	f	typeref:typename:int
main	stream.cpp	/^int main(void)$/;"	f	typeref:typename:int
main	virtual.cpp	/^int main(void)$/;"	f	typeref:typename:int
majorityElement	leetcode/Majority Element.cpp	/^    int majorityElement(vector<int>& nums) {$/;"	f	class:Solution	typeref:typename:int	file:
maxArea	leetcode/Container With Most Water.cpp	/^    int maxArea(vector<int>& height) {$/;"	f	class:Solution	typeref:typename:int	file:
maxProfit	leetcode/Best_Time_to_Buy_and_Sell_Stock_II.cpp	/^    int maxProfit(vector<int>& prices) {$/;"	f	class:Solution	typeref:typename:int	file:
maxSubArray	leetcode/max_subarray.cpp	/^    int maxSubArray(vector<int>& nums) {$/;"	f	class:Solution	typeref:typename:int	file:
mergeTwoLists	leetcode/Merge Two Sorted Lists.cpp	/^    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {$/;"	f	class:Solution	typeref:typename:ListNode *	file:
month	chapter3/HeartRates.hpp	/^    int year,month,day;$/;"	m	class:HeartRates	typeref:typename:int
myfunction	algorithm/nth_ele.cpp	/^bool myfunction (int i,int j) { return (i>j); }$/;"	f	typeref:typename:bool
name	CppProperties.json	/^      "name": "x86-Debug",$/;"	s	object:configurations.0
name	chapter3/HeartRates.hpp	/^    std::string name;$/;"	m	class:HeartRates	typeref:typename:std::string
nums	concurrency/demo.cpp	/^    vector<int>& nums;$/;"	m	class:F	typeref:typename:vector<int> &	file:
operator !=	DataStructure/complex.cpp	/^bool operator !=(Complex a,Complex b)$/;"	f	typeref:typename:bool
operator ()	concurrency/demo.cpp	/^    void operator()(){$/;"	f	class:F	typeref:typename:void	file:
operator ()	leetcode/Longest Substring.cpp	/^        bool operator ()(pair<char,int> p){$/;"	f	class:Solution::findKey	typeref:typename:bool	file:
operator () 	algorithm/sort_functor.cpp	/^    T operator() (T&& x){$/;"	f	class:Functor	typeref:typename:T	file:
operator +	DataStructure/vector.hpp	/^Vector<T> operator +(const Vector<T>& a,const Vector<T>& b)$/;"	f	typeref:typename:Vector<T>
operator +=	DataStructure/complex.cpp	/^	Complex& operator +=(const Complex& r)$/;"	f	class:Complex	typeref:typename:Complex &	file:
operator -=	DataStructure/complex.cpp	/^	Complex& operator -=(const Complex& r)$/;"	f	class:Complex	typeref:typename:Complex &	file:
operator =	DataStructure/vector.hpp	/^	Vector& operator =(const Vector& r)$/;"	f	class:Vector	typeref:typename:Vector &
operator ==	DataStructure/complex.cpp	/^bool operator ==(Complex a,Complex b)$/;"	f	typeref:typename:bool
operator []	DataStructure/vector.hpp	/^	const value_type& operator[](const int index)const$/;"	f	class:Vector	typeref:typename:const value_type &
operator []	DataStructure/vector.hpp	/^	value_type& operator [](int index)$/;"	f	class:Vector	typeref:typename:value_type &
parent	DataStructure/tree/BST.cpp	/^    shared_ptr<Node<T>> parent;$/;"	m	struct:Node	typeref:typename:shared_ptr<Node<T>>	file:
play	virtual.cpp	/^    virtual void play(string s="Base class") const$/;"	f	class:Base	typeref:typename:void	file:
play	virtual.cpp	/^    void play(string s="derived class") const override$/;"	f	class:SubClass	typeref:typename:void	file:
push_back	DataStructure/vector.hpp	/^	void push_back(value_type value)$/;"	f	class:Vector	typeref:typename:void
quickSort	algorithm/sort/quickSort.cpp	/^void quickSort(vector<int>& nums,int beg,int end){$/;"	f	typeref:typename:void
quickSort_ptr	algorithm/sort/quickSort.cpp	/^void quickSort_ptr(vector<int>& nums,int beg,int end){$/;"	f	typeref:typename:void
quick_sort	algorithm/sort/quickSortPtr.cpp	/^void quick_sort(vector<T>& arr,int beg,int end)$/;"	f	typeref:typename:void
re	DataStructure/complex.cpp	/^	double re,im;$/;"	m	class:Complex	typeref:typename:double	file:
real	DataStructure/complex.cpp	/^	double real()const$/;"	f	class:Complex	typeref:typename:double	file:
reallocate	DataStructure/vector.hpp	/^	void reallocate()$/;"	f	class:Vector	typeref:typename:void
removeDuplicates	leetcode/remove_dup_array_ele.cpp	/^    int removeDuplicates(vector<int>& nums) {$/;"	f	class:Solution	typeref:typename:int	file:
right	DataStructure/tree/BST.cpp	/^    shared_ptr<Node<T>> right;$/;"	m	struct:Node	typeref:typename:shared_ptr<Node<T>>	file:
rob	leetcode/House Robber.cpp	/^    int rob(vector<int>& nums) {$/;"	f	class:Solution	typeref:typename:int	file:
root	DataStructure/tree/BST.cpp	/^    shared_ptr<Node<T>> root;$/;"	m	class:BST	typeref:typename:shared_ptr<Node<T>>	file:
search	DataStructure/tree/BST.cpp	/^    bool search(T value){$/;"	f	class:BST	typeref:typename:bool	file:
searchInsert	leetcode/search_Insert_Position.cpp	/^    int searchInsert(vector<int>& nums, int target) {$/;"	f	class:Solution	typeref:typename:int	file:
selectSort	algorithm/sort/selectSort.cpp	/^std::vector<int>& selectSort(std::vector<int> &arr,int beg,int end){$/;"	f	typeref:typename:std::vector<int> &
setCourseName	chapter3/GradeBook.cpp	/^void GradeBook::setCourseName(std::string cn)$/;"	f	class:GradeBook	typeref:typename:void
setTeacherName	chapter3/GradeBook.cpp	/^void GradeBook::setTeacherName(std::string tn)$/;"	f	class:GradeBook	typeref:typename:void
size	DataStructure/vector.hpp	/^	int size() const$/;"	f	class:Vector	typeref:typename:int
sortColors	leetcode/Sort Colors.cpp	/^    void sortColors(vector<int>& nums) {$/;"	f	class:Solution	typeref:typename:void	file:
teacherName	chapter3/GradeBook.hpp	/^    string teacherName;    $/;"	m	class:GradeBook	typeref:typename:string
threeSum	leetcode/3Sum.cpp	/^    vector<vector<int>> threeSum(vector<int>& nums) {$/;"	f	class:Solution	typeref:typename:vector<vector<int>>	file:
threeSumClosest	leetcode/3Sum Closet.cpp	/^    int threeSumClosest(vector<int>& nums, int target) {$/;"	f	class:Solution	typeref:typename:int	file:
topKFrequent	leetcode/Top K Frequent Elements.cpp	/^    vector<int> topKFrequent(vector<int>& nums, int k) {$/;"	f	class:Solution	typeref:typename:vector<int>	file:
tune	virtual.cpp	/^void tune(Base& b)$/;"	f	typeref:typename:void
twoSum	leetcode/two_sum.cpp	/^    vector<int> twoSum(vector<int>& nums, int target) {$/;"	f	class:Solution	typeref:typename:vector<int>	file:
used	DataStructure/vector.hpp	/^	int used = 0;;$/;"	m	class:Vector	typeref:typename:int
value	DataStructure/tree/BST.cpp	/^    T value = 0;$/;"	m	struct:Node	typeref:typename:T	file:
value_type	DataStructure/vector.hpp	/^	using value_type = T;$/;"	t	class:Vector	typeref:typename:T
y	algorithm/sort_functor.cpp	/^    T y=0;$/;"	m	class:Functor	typeref:typename:T	file:
year	chapter3/HeartRates.hpp	/^    int year,month,day;$/;"	m	class:HeartRates	typeref:typename:int
~BST	DataStructure/tree/BST.cpp	/^    ~BST(){$/;"	f	class:BST	file:
~Base	classDemo/virutalDescons.cpp	/^    virtual ~Base()$/;"	f	class:Base	file:
~Derived	classDemo/virutalDescons.cpp	/^    ~Derived()$/;"	f	class:Derived	file:
~Vector	DataStructure/vector.hpp	/^	~Vector()$/;"	f	class:Vector
操作系统	C++学习目标.md	/^## 操作系统$/;"	s
数据库	C++学习目标.md	/^## 数据库$/;"	s
数据结构	C++学习目标.md	/^## 数据结构$/;"	s
第三章学习笔记	chapter3/note.md	/^## 第三章学习笔记$/;"	s
算法	C++学习目标.md	/^## 算法$/;"	s
计算机网络	C++学习目标.md	/^## 计算机网络$/;"	s
